# Generated by Django 4.0.4 on 2022-05-17 18:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(choices=[('OP', 'Olympic Peninsula'), ('NC', 'North Cascades'), ('CC', 'Central Cascades'), ('SQ', 'Snoqualmie'), ('SC', 'South Cascades'), ('WW', 'Western Washington Lowlands'), ('EW', 'Eastern Washington'), ('CW', 'Central Washington'), ('SW', 'Southwest Washington')], help_text='Region Name', max_length=2, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Trail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='time modified')),
                ('name', models.CharField(help_text='Trail Name', max_length=100, unique=True)),
                ('coordinates', models.CharField(help_text='Geographic coordinates searchable via Google Maps', max_length=25)),
                ('length_json', models.JSONField(blank=True, help_text='From 0.1 to 999.9 miles', null=True, verbose_name='Trail length')),
                ('elevation_gain_json', models.JSONField(blank=True, help_text='From trailhead to highest point of trail', null=True, verbose_name='Elevation Gain')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trails.region')),
            ],
        ),
        migrations.CreateModel(
            name='Trailhead',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='time modified')),
                ('name', models.CharField(help_text='Name of Trailhead', max_length=50, unique=True)),
                ('coordinates', models.CharField(help_text='Geographic coordinates searchable via Google Maps', max_length=25)),
                ('access', models.CharField(blank=True, choices=[('FS', 'Forest Service Road'), ('P', 'Paved Road')], help_text='How is the trailhead accessed?', max_length=2, null=True)),
                ('access_distance', models.IntegerField(blank=True, help_text='If accessed via service road, length of service road from paved road to trailhead', null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('pkg_type', models.CharField(blank=True, choices=[('UL', 'Unpaved Lot'), ('PL', 'Paved Lot'), ('S', 'Street/Road'), ('P', 'Designated Pullout/Shoulder')], help_text='Type of Parking at Trailhead', max_length=2, null=True, verbose_name='Parking type')),
                ('pkg_capacity', models.IntegerField(blank=True, help_text='Approximate number of cars capable of parking at trailhead lot', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Parking capacity')),
                ('bathroom_type', models.CharField(blank=True, choices=[('P', 'Portable/Outhouse'), ('FP', 'Fixed Building, Pit'), ('FR', 'Fixed Building with plumbing')], help_text='Is there a bathroom at the trailhead?', max_length=2, null=True)),
                ('bathroom_status', models.CharField(blank=True, choices=[('O', 'Open'), ('C', 'Closed')], help_text='Is the bathroom open?', max_length=1, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trails.region')),
                ('trails', models.ManyToManyField(related_name='trailheads', to='trails.trail')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='time created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='time modified')),
                ('length', models.DecimalField(blank=True, decimal_places=1, help_text='From 0.1 to 999.9 miles', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('elevation_gain', models.IntegerField(blank=True, help_text='From trailhead to highest point of trail', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Elevation Gain')),
                ('date_hiked', models.DateField(help_text='What date was the hike?')),
                ('day_hiked', models.CharField(choices=[('M', 'Monday'), ('T', 'Tuesday'), ('W', 'Wednesday'), ('Th', 'Thursday'), ('F', 'Friday'), ('S', 'Saturday'), ('Su', 'Sunday')], help_text='What day of the week was the hike?', max_length=2)),
                ('weather_type', models.CharField(blank=True, choices=[('R', 'Rain'), ('Sn', 'Snow'), ('S', 'Sun'), ('PC', 'Partly Cloudy'), ('O', 'Overcast')], help_text='What was the weather like?', max_length=2, null=True)),
                ('temperature', models.CharField(blank=True, choices=[('F', '< 32'), ('C', '33-50'), ('N', '51-70'), ('W', '71-85'), ('H', '86-100'), ('E', '100 <')], help_text='What was the temperature?', max_length=1, null=True)),
                ('car_type', models.CharField(blank=True, choices=[('Suv', 'SUV'), ('S', 'Sedan'), ('T', 'Truck'), ('4wd', 'Four-wheel drive')], help_text='With what type of car did you access the trail?', max_length=3, null=True)),
                ('access', models.CharField(blank=True, choices=[('FS', 'Forest Service Road'), ('P', 'Paved Road')], help_text='How is the trailhead accessed?', max_length=2, null=True)),
                ('access_distance', models.DecimalField(blank=True, decimal_places=1, help_text='If accessed via service road, length of service road from paved road to trailhead', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.1)])),
                ('access_condition', models.CharField(blank=True, choices=[('I', 'Impassable'), ('P+', 'Many potholes'), ('P', 'Potholes'), ('P-', 'Occasional potholes'), ('G', 'Good')], help_text='If accessed via service road, the condition of the service road?', max_length=2, null=True)),
                ('trail_begin', models.TimeField(help_text='What time did the hike begin?')),
                ('trail_end', models.TimeField(help_text='What time did the hike end?')),
                ('bathroom_type', models.CharField(blank=True, choices=[('P', 'Portable/Outhouse'), ('FP', 'Fixed Building, Pit'), ('FR', 'Fixed Building with plumbing')], help_text='Is there a bathroom at the trailhead?', max_length=2, null=True)),
                ('bathroom_status', models.CharField(blank=True, choices=[('O', 'Open'), ('C', 'Closed')], help_text='Is the bathroom open?', max_length=1, null=True)),
                ('pkg_location', models.CharField(choices=[('UL', 'Unpaved Lot'), ('PL', 'Paved Lot'), ('S', 'Street/Road'), ('P', 'Designated Pullout/Shoulder')], help_text='Where did you park at the trailhead?', max_length=2, verbose_name='Type of Parking')),
                ('pkg_estimate_begin', models.IntegerField(help_text='Approximate parking capacity full at trailhead arrival', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Percentage Capacity Start')),
                ('pkg_estimate_end', models.IntegerField(help_text='Approximate parking capacity full at trailhead departure', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Percentage Capacity End')),
                ('cars_seen', models.IntegerField(help_text='Most cars seen at arrival/departure', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cars seen')),
                ('people_seen', models.IntegerField(help_text='Approximate number of people encountered on trail', validators=[django.core.validators.MinValueValidator(0)], verbose_name='People seen')),
                ('horses_seen', models.BooleanField()),
                ('dogs_seen', models.BooleanField()),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trails.region')),
                ('trail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trails.trail')),
                ('trailhead', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trails.trailhead')),
            ],
        ),
    ]
